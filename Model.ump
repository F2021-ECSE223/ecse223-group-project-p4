//Check compositions for quantity association classes
//See answer about before / after constraints
//Make sure functions can be put the way we did

namespace ca.mcgill.ecse223.climbsafe.model;

class ClimbSafeSystem{
}

class User{
  unique immutable email;
  password;
  name;
}

class Admin{
  singleton;
  immutable email = "admin@nmc.nt";
  password = "admin";
}

class Guide{
  isA User;
  Integer pricePerWeek;
}

class Member{
  isA User;
  Integer totalNumberOfWeeksDesired; // Saves user input in memory before the admin assigns him to a mountain climb of that length
  Boolean wantsGuide; // Saves user input in memory before the admin assigns him to a mountain climb
  Boolean wantsHotel; // Saves user input in memory before the admin assigns him to a hotel
  Integer totalCost = {
    // Will implement this later
  }
  Integer totalWeight = {
    // Will implement this later
  }
}

class EmergencyContact{
  name;
  Integer number;
  email;
}

class ClimbingSeason{
  Date start;
  Date end;
}

class EquipmentItem{
  Double weight;
  Integer pricePerWeek;
  name;
}

class Bundle{
  name;
  Integer pricePerWeek = {
    // Will implement this later
  }
  Integer weight = {
    // Will implement this later
  }
  Integer percentageDiscount;
}

  class Hotel{
  name;
  address;
  Rating rating;
  
  enum Rating{onestar, twostars, threestars, fourstars, fivestars}
}

class MountainClimb{
  Integer startWeek;
  Integer endWeek;
} 

associationClass BundleQuantity{
  * Member bundlePicker;
  * Bundle chosenBundle;
  Integer desiredAmountOfBundles;
}

associationClass ItemQuantity{
  * Member itemPicker;
  * EquipmentItem chosenItem;
  Integer desiredAmountOfItems;
}

association{
  
  // The Member-Guide-Admin associations
  1..* User users -- 1 EmergencyContact contact;
  1 Admin admin -- 0..1 ClimbingSeason season;
  
  // The climbing season associations
  1 ClimbingSeason season -- * EquipmentItem allItems;
  1 ClimbingSeason season -- * Bundle allBundles;
  1 ClimbingSeason season -- * Hotel allHotels;
  1 ClimbingSeason season <@>- * MountainClimb climbs;
  
  // The equipment association
  * Bundle bundles -- 2..* EquipmentItem items;
  
  // The member trip details associations
  * Member guests -- 0..1 Hotel hotel;
  1..* Member members -- 0..1 MountainClimb climb; // 0..1 cause there is a delay between creating a member and assigning him to a climb
  
  // The guide trip details association
  0..1 Guide guide -- * MountainClimb climbs;
  
  // Additional compositions
  1 ClimbSafeSystem <@>- 1 ClimbingSeason;
  0..1 ClimbSafeSystem <@>- 1 Admin; // We made the system's multiplicity 0..1 since we cannot pass parameters to the constructor of the singleton class Admin (The system's association is set after initializing the admin using the setClimbSafeSystem() method)
  1 ClimbSafeSystem <@>- * Hotel;
  1 ClimbSafeSystem <@>- * EquipmentItem;
  1 ClimbSafeSystem <@>- * Bundle;
  1 ClimbingSeason <@>- * EmergencyContact;
  1 ClimbingSeason <@>- * ItemQuantity;
  1 ClimbingSeason <@>- * BundleQuantity;
  
}