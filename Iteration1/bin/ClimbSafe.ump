namespace ca.mcgill.ecse223.climbsafe.model;

class ClimbSafeSystem{
  Date seasonStart;
  Date seasonEnd;
  Integer guidePricePerWeek;
  Integer bundlePercentageDiscount; // If a guide is hired
}

class User{
  abstract;
  unique email; // Should be immutable too but Umple doesn't allow for both unique and immutable to be used simultaneously
  password;
}

class Climber{
  isA User;
  abstract;
  name;
}

class Admin{ // Since an Admin must have the specified email which is unique, we can only have 1 admin, so no need for a singleton class
  isA User;
  // The email requirement ("must be "admin@nmc.nt") was taken care of in the constraints file provided in the report
  // The password requirement ("admin" by default) will be taken care of in java by adding a line in the Admin constructor
}
	
class Guide{ // Separate class cause has its own associations
  isA Climber;
}

class Member{
  isA Climber;
  Integer totalNumberOfWeeksDesired; // Saves user input in memory before the admin assigns him to a mountain climb of that length
  Boolean wantsGuide; // Saves user input in memory before the admin assigns him to a mountain climb
  Boolean wantsHotel; // Saves user input in memory before the admin assigns him to a hotel
  Integer totalCost; // This is a derived attribute, sums up the total cost of the trip (multiplies the prices per week by the number of weeks)
  Integer totalWeight;  // This is a derived attribute, sums up the total weight of the chosen equipment (to know if it can be carried in the mountains)
}

class EmergencyContact{
  name;
  Integer number;
  email;
}

class EquipmentItem{
  Double weight;
  Integer pricePerWeek;
  name;
}

class Bundle{
  name;
  Integer pricePerWeek; // This is a derived attribute, sums up the total price per week of the items in the bundle
  Integer weight; // This is a derived attribute, sums up the total weight of the chosen equipment
}

  class Hotel{
  name;
  address;
  Rating rating;
  
  enum Rating{oneStar, twoStars, threeStars, fourStars, fiveStars}
}

class MountainClimb{
  Integer startWeek;
  Integer endWeek;
} 

associationClass BundleQuantity{
  * Member bundlePicker;
  * Bundle chosenBundle;
  Integer desiredAmountOfBundles;
}

associationClass ItemQuantity{
  * Member itemPicker;
  * EquipmentItem chosenItem;
  Integer desiredAmountOfItems;
}

association{
  
  // The climber association
  * Climber climbers -- 1 EmergencyContact contact;
  
  // The climb safe system compositions
  1 ClimbSafeSystem <@>- * EquipmentItem allItems;
  1 ClimbSafeSystem <@>- * Bundle allBundles;
  1 ClimbSafeSystem <@>- * Hotel allHotels;
  1 ClimbSafeSystem <@>- * MountainClimb climbs;
  1 ClimbSafeSystem <@>- * EmergencyContact emergencyContacts;
  1 ClimbSafeSystem <@>- * User users;
  1 ClimbSafeSystem <@>- * ItemQuantity; // No role cause this association will not be navigated
  1 ClimbSafeSystem <@>- * BundleQuantity; // No role cause this association will not be navigated
  
  // The equipment association
  * Bundle bundles -- 2..* EquipmentItem items;
  
  // The member trip details associations
  * Member guests -- 0..1 Hotel hotel;
  1 Member member -- 0..1 MountainClimb climb; // 0..1 cause there is a delay between creating a member and assigning him to a climb
  
  // The guide trip details association
  0..1 Guide guide -- * MountainClimb climbs;
}